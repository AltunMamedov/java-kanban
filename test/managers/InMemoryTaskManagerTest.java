package managers;

import org.junit.jupiter.api.BeforeEach;
import tasks.EpicTask;
import tasks.Status;
import tasks.SubTask;
import tasks.Task;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class InMemoryTaskManagerTest {

    @Test
    void shouldAddNewTask() {
        TaskManager manager = new InMemoryTaskManager();
        Task task = new Task("Задача", "Описание задачи", Status.NEW);
        Task added = manager.addNewTask(task);

        assertNotNull(added);
        assertNotEquals(0, added.getId());
        assertEquals("Задача", added.getName());
    }

    @Test
    void shouldAddNewEpic() {
        TaskManager manager = new InMemoryTaskManager();
        EpicTask epic = new EpicTask("Эпик", "Описание эпика");
        EpicTask added = manager.addNewEpic(epic);

        assertNotNull(added);
        assertNotEquals(0, added.getId());
        assertEquals("Эпик", added.getName());
    }

    @Test
    void shouldAddNewSubtask() {
        TaskManager manager = new InMemoryTaskManager();
        EpicTask epic = manager.addNewEpic(new EpicTask("Эпик для подзадачи", "Описание"));
        SubTask subtask = new SubTask("Подзадача", "Описание подзадачи", Status.NEW, epic.getId());
        SubTask added = manager.addNewSubtask(subtask);

        assertNotNull(added);
        assertNotEquals(0, added.getId());
        assertEquals(epic.getId(), added.getEpicId());
    }

    @Test
    void shouldGetTaskById() {
        TaskManager manager = new InMemoryTaskManager();
        Task task = manager.addNewTask(new Task("Получить задачу", "Описание", Status.NEW));

        Task found = manager.getTaskById(task.getId());
        assertEquals(task, found);
    }

    @Test
    void _shouldGetEpicById() {
        TaskManager manager = new InMemoryTaskManager();
        EpicTask epic = manager.addNewEpic(new EpicTask("Получить эпик", "Описание"));

        EpicTask found = manager.getEpicById(epic.getId());
        assertEquals(epic, found);
    }

    @Test
    void shouldGetSubTaskById() {
        TaskManager manager = new InMemoryTaskManager();
        EpicTask epic = manager.addNewEpic(new EpicTask("Эпик", "Описание"));
        SubTask subtask = manager.addNewSubtask(
                new SubTask("Получить подзадачу", "Описание", Status.NEW, epic.getId())
        );

        SubTask found = manager.getSubTaskById(subtask.getId());
        assertEquals(subtask, found);
    }

    @Test
    void shouldNotConflictWithAutoGeneratedId() {
        TaskManager manager = new InMemoryTaskManager();

        Task manualTask = new Task("Вручную созданная задача", "Описание", Status.NEW);
        manualTask.setId(100);
        manager.getAllTasks().add(manualTask);


        Task autoTask = new Task("Авто задача", "Описание", Status.NEW);
        Task added = manager.addNewTask(autoTask);

        assertEquals(100, manualTask.getId());
        assertNotEquals(100, added.getId());
        assertNotNull(manager.getTaskById(added.getId()));
        assertNull(manager.getTaskById(100));
    }

    @Test
    void shouldNotChangeTaskFieldsWhenAdded() {
        TaskManager manager = new InMemoryTaskManager();

        Task originalTask = new Task("Задача", "Описание задачи", Status.NEW);

        Task addedTask = manager.addNewTask(originalTask);

        assertNotNull(addedTask.getId(), "ID должен быть установлен");
        assertEquals("Задача", addedTask.getName(), "Имя не должно измениться");
        assertEquals("Описание задачи", addedTask.getDescription(), "Описание не должно измениться");
        assertEquals(Status.NEW, addedTask.getStatus(), "Статус не должен измениться");

        assertEquals(addedTask.getId(), originalTask.getId(), "ID должен быть установлен и в оригинальной задаче");
    }
}